; [include]
;     path = ~/Documents/path/mydotfiles/.gitconfig

[fetch]
    prune = true

[diff]
    tool = vscode
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[merge]
    tool = vscode
[mergetool "vscode"]
    cmd = code --wait $MERGED
    trustExitCode = true

[alias]
    alias-basic = "!#----------------------------------------------------------;\n\
        git alias | head -7"

    # 기본 별칭
    s = status -s
    sw = switch
    re = restore

    alias-branch = "!#----------------------------------------------------------;\n\
        git alias | egrep '[bB]ranch'"

    # git branch *
    ch = "!git bb $1"
    b0 = "!# 작업 branch를 출력. \n \
        git branch --show-current'"
    back = "!# 현재 작업중인 branch backup. \n \
        echo created new branch: backup-`git b0`; \
        git branch backup-`git b0`"
    bb = "!# branch 도구 모음. 기본 checkout  \n \
        f() { \n \
            if [ $# = 0 ]; then \
                git branch-select | xargs git checkout; \
            elif [ $1 = 'd' -o $1 = 'D' ]; then \
                git branch -$1 $(git bb list | fzf -m | awk '{print $2}'); \
            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
                git branch-clean; \
            elif [ $1 = 'list' -o $1 = 'l' ]; then \
                git branch-list; \
            elif [ $1 = 'select' -o $1 = 's' ]; then \
                git branch-select; \
            fi; \
        }; f"
    branch-list = "!# branch 목록을 출력. \n \
        git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD) %(refname:strip=2) | %(committerdate:relative) | %(authorname)' \
        | column -ts'|' \
        | sed 's/^ /./'"
    branch-list-all = "!# branch 목록을 모두 출력. \n \
        for branch in `git branch -r --merged | grep -v HEAD`; do echo `git show --format=\"%ci ; %cr ; %an ;\" $branch | head -n 1` $branch; done | sort -r | column -ts';'"
    branch-select = "!# branch 하나를 선택. \n \
        f() { \
            _height=$(stty size | awk '{print $1}');\
            git branch-list | fzf --preview \"git l {2} | head -n $_height\" | awk '{print $2}'; \
        }; f"
    branch-clean = "!# 선택한 branch들을 삭제. \n \
        curr_hash=`git show -s | head -1 | cut -d ' ' -f2`; \
        for branch in `find .git/refs -type f | fzf --ansi -m --preview=\"cat {} | xargs git l\"` ; do \
            hash=`cat $branch`; \
            if [ $hash = $curr_hash ]; then \
                continue; \
            fi; \
            git ll | egrep $hash -C 1; \
            read -p \"Delete $branch? [y|n] \" -r; \
            REPLY=${REPLY:-"n"}; \
            if [ $REPLY = \"y\" ]; then \
                rm $branch; \
                echo \"\\033[32m$branch \\033[0mhas been\\033[31m deleted\\033[0m.\n\"; \
            fi; \
        done"

    sync = "!# remote의 같은 이름의 branch와 동기화. \n \
        remote=$( \
            { \
                git remote -v | egrep '^(origin|upstream)\\s'; \
                git remote -v | egrep -v '^(origin|upstream)\\s' | sort; \
            } \
            | awk '{print $1, $2}' | uniq \
            | column -t \
            | fzf | awk '{print $1}' \
        ); \
        if ! [ -z $remote ]; then \
            git fetch $remote && git reset --hard $remote/`git b0`; \
        fi"
    update = "!# remote의 같은 이름의 branch와 pull --rebase. \n \
        remote=$( \
            { \
                git remote -v | egrep '^(origin|upstream)\\s'; \
                git remote -v | egrep -v '^(origin|upstream)\\s' | sort; \
            } \
            | awk '{print $1, $2}' | uniq \
            | column -t \
            | fzf | awk '{print $1}' \
        ); \
        git stash; git pull --rebase $remote `git b0`; git stash pop;"

    alias-stage = "!#----------------------------------------------------------;\n\
        git alias | egrep '(add|diff|stage)' -i"
    # git add *
    a = "!# 파일을 선택하고 add 한다. \n \
        git diff-select | xargs git add"

    diff-info = "!# diff를 출력한다. \n \
        fileA=/tmp/git-s-$(uuidgen); \
        fileB=/tmp/git-diff-$(uuidgen); \
        git s | awk '{print $2,$1}' > $fileA; \
        git diff --numstat | awk '{print $3,$1,$2}' > $fileB; \
        join -t' ' -a 1 $fileA $fileB | awk '{print $2, \"(+\"$3 \",-\"$4\")\", $1}' | sed 's/(+,-)/./; s/^\\([^?]\\) *\\./\\1 STAGED/' | column -t -s' ' ; \
        rm -f $fileA $fileB; \
        "
    diff-select = "!# 변경된 파일을 선택하면 선택한 파일을 출력. \n \
        f() { \
            git diff-info \
            | egrep -v '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then bat {3}; else git diff --color=always {3}; fi\" \
            | awk '{print $3}'; \
        }; f"

    aa = "!# 트래킹 되지 않던 파일도 선택하고 add 한다. \n \
        git diff-select-r | xargs git add"
    diff-info-r = "!# diff를 출력한다. \n \
        fileA=/tmp/git-s-$(uuidgen); \
        fileB=/tmp/git-diff-$(uuidgen); \
        ( git status -s; git ls-files -o --exclude-standard | sed 's/^/?? /' ; ) | awk '{print $2,$1}' > $fileA; \
        git diff --numstat | awk '{print $3,$1,$2}' > $fileB; \
        join -t' ' -a 1 $fileA $fileB | awk '{print $2, \"(+\"$3 \",-\"$4\")\", $1}' | sed 's/(+,-)/./; s/^\\([^?]\\) *\\./\\1 STAGED/' | column -t -s' ' ; \
        rm -f $fileA $fileB; \
        "
    diff-select-r = "!# 변경된 파일을 선택하면 선택한 파일을 출력. \n \
        f() { \
            git diff-info-r \
            | sort -k4 -r \
            | uniq \
            | egrep -v '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then bat {3}; else git diff --color=always {3}; fi\" \
            | awk '{print $3}'; \
        }; f"

    diff-unselect = "!# staged된 파일들을 선택하면 출력. \n \
        f() { \
            git diff-info \
            | egrep '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then pygmentize {3}; else git diff --color=always --cached {3}; fi\" \
            | awk '{print $3}'; \
        }; f"
    unstage = "!# staged된 파일들을 선택하면 unstage 한다. \n \
        git diff-unselect | xargs git reset HEAD"
    r = "!# staged된 파일들을 선택해 unstage 한다. \n \
        git diff-select-r | xargs git restore"

    alias-stash = "!#----------------------------------------------------------;\n\
        git alias | grep stash"
    # git stash
    stash-save = "!# 변경 사항을 stash에 추가한다. \n \
        git diff-info; \
        read -p \"save message: \" msg; \
        git stash save \"$msg\""

    stash-list = "!# stash 목록을 보여준다. \n \
        git stash list --pretty=format:\"%C(red)%gd%C(reset) %C(green)(%cr) %C(reset)%s\""

    stash-select = "!# stash 아이템을 선택. \n \
        f() { \
            git stash-list \
            | fzf --ansi $1 --preview \"git stash show -p {1} --color=always\" \
            | cut -d' ' -f1; \
        }; f"

    stash-drop = "!# stash 아이템을 드랍. \n \
        for sid in $(git stash-select -m) ; do \
            git stash drop $sid; \
        done;"

    stash-op = "!# stash 도구 \n \
        f() { \
            git stash-select | xargs git stash $1; \
        }; f"
    stash-apply = "!# stash 아이템을 apply한다. \n \
        git stash-op apply"
    stash-pop = "!# stash 아이템을 pop한다. \n \
        git stash-op pop"

    alias-log = "!#----------------------------------------------------------;\n\
        git alias | egrep 'log|commit-'"
    # git commit *
    commit-select = "!# git log에서 commit하나를 선택하고 출력. \n \
        git l \
        | fzf -m --ansi --layout=reverse --preview=\"echo {} | sed 's/^[*| ]*//g' | cut -d' ' -f1 | xargs git show --color=always \" \
        | sed 's/^[*| ]*//g' | cut -d' ' -f1"
    commit-copy = "!# git log에서 commit하나를 선택하고 클립보드에 복사. \n \
        git commit-select | tr -d '\n' | pbcopy && echo Copied: `pbpaste`;"
    # log 별칭
    l = "!# 간단 log \n \
        git log \
        --color --graph --decorate \
        --no-merges \
        --date=format:'%Y-%m-%d' \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
    ld = "!# 디테일 간단 log \n \
        git log \
        --color --graph --decorate \
        --no-merges \
        --date=format:'%Y-%m-%d %H:%M:%S' \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%ad)%C(bold blue) %an <%ae>'"
    ll = "!# hash 강조 log \n \
        git log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d' \
        --pretty=format:'%C(red)%H%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
    lld = "!# hash 강조 디테일 log \n \
        git log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d %H:%M:%S' \
        --pretty=format:'%C(red)%H%C(auto)%d %s %C(green)(%ad)%C(bold blue) %an <%ae>'"
    lh = "!# 최근 25개 log \n \
        git l | head -25"
    lf = "!# 주어진 file의 history 출력. \n \
        fzf --preview=\"bat {}\" | xargs git l --follow"
    lfp = "!# 주어진 file의 history를 자세히 출력. \n \
        fzf --preview=\"bat {}\" | xargs git l --follow -p"
    ranking = "!# commit 수 랭킹을 집계한 결과를 출력.  \n \
        git shortlog -sn"

    # git merge *
    knot = "!# 2개의 커밋을 선택하면 머지. \n \
        f() { \
            if [ $(git status --short | egrep -v '^\\?' | wc -l) -gt 0 ]; then \
                echo '변경사항을 먼저 정리해 주세요.';\
                return; \
            fi; \
            _branch=`git b0`; \
            _current=backup-`uuidgen`; \
            _knot1=`uuidgen`; \
            _knot2=`uuidgen`; \
            git tag $_current; \
            git switch -c $_knot2 $2; \
            git switch -c $_knot1 $1; \
            git merge $2 --no-ff; \
            git switch $_branch; \
            git rebase -i -r $_knot1; \
            git branch -D $_knot1; \
            git branch -D $_knot2; \
            read -p \"Delete backup tag $_current ? [y|n] \" -r; \
            REPLY=${REPLY:-"n"}; \
            if [ $REPLY = \"y\" ]; then \
                git tag -d $_current; \
            fi; \
        }; f"

    alias-alias = "!#----------------------------------------------------------;\n\
        git alias | grep alias"
    alias = "!# 모든 alias를 출력. \n\
        git config --list | egrep '^alias.+' | sed -e 's/^alias\\.//' | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' | column -t -s'=' | sed 's/!#* *//; s/;$//' | cut -c1-85"
    alias-doctor = "!# alias에서 사용하는 dependency를 점검. \n\
        f() { \
            if [ $(which pygmentize | wc -l) -lt 1 ]; then \
                echo 'Not found : Pygments(pygmentize)'; \
                echo '    see     : http://pygments.org/'; \
                echo '    install : pip3 install Pygments'; \
                echo '';\
            fi; \
            if [ $(which fzf | wc -l) -lt 1 ]; then \
                echo 'Not found : fzf'; \
                echo '    see          : https://github.com/junegunn/fzf#installation'; \
                echo '    install(Mac) : brew install fzf'; \
                echo '    install(git) : git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf'; \
                echo '                   ~/.fzf/install'; \
                echo '';\
            fi; \
        }; f" 

